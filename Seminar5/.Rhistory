}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
collatz <- collatz[collatz > 80]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
# Get the matrix for Collatz
collatz_notes
# Get the matrix for Collatz
collatz_music <- collatz_notes
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
playProgression(collatz_music)
remove.packages("Cairo")
library(car)
install.packages("car")
install.packages("car")
install.packages('car','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('rugarch','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('nloptr','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
library(car)
install.packages('carData','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages("carData", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
install.packages("car", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
find.package("factoextra")
find.package("car")
.Library
x <- data.frame("Stock" = c("A", "B"), "Price" = c(42,68))
x
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
install.packages("devtools")
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
library(rugarch)
rugarch::plot()
?rugarch::plot
library(rugarch)
ugarchfit
showMethods("ugarchfit")
?ugarchfit
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main=“”, xlab=“”, ylab=“”, bty=“n”, col=co7[2], las=1,type=‘l’,bty=‘l’)
#  plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
cat(sd(y),“\n”)
}
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
cat(sd(y),“\n”)
}
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
cat(sd(y),"\n")
}
Plot1(1e3,4)
for(i in 1:10)Plot1(1e7)
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
plot(y, main=“”, xlab=“”, ylab=“”, bty=“n”, col=co7[2], las=1,type=‘l’,bty=‘l’)
#  plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
cat(sd(y),“\n”)
}
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
plot(y, main=“”, xlab=“”, ylab=“”, bty=“n”, col=co7[2], las=1,type=‘l’,bty=‘l’)
#  plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
cat(sd(y),"\n")
}
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
plot(y, main="", xlab="", ylab="", bty="n", col=co7[2], las=1,type="l",bty="l")
#  plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
cat(sd(y),"\n")
}
Plot1(1e3,4)
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
#  plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
cat(sd(y),"\n")
}
Plot1(1e3,4)
for(i in 1:10)Plot1(1e3)
for(i in 1:10)
Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e3)
for(i in 1:10) Plot1(1e5)
S <- 1000
sd <- rep(NA, S)
for (i in 1:S){
sd[i] <- Plot1(N = 1e4)
}
sd
Plot1(1e4)
Plot1(1e4)
Plot1=function(N=1000,seed=0){
par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(sd(y))
}
S <- 1000
sd <- rep(NA, S)
for (i in 1:S){
sd[i] <- Plot1(N = 1e4)
}
hist(sd)
Plot1=function(N=1000,seed=0){
#par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(sd(y))
}
dev.off()
S <- 10000
sd <- rep(NA, S)
for (i in 1:S){
sd[i] <- Plot1(N = 1e4)
}
hist(sd, breaks = 20)
hist(sd, breaks = 20, xlim = c(0,2))
hist(sd, breaks = 100)
hist(sd, breaks = 100, xlim = c(1, 5))
hist(sd, breaks = 100)
hist(sd, breaks = 100, xlim = c(0,5))
hist(sd, breaks = 1000, xlim = c(0,2))
hist(sd, breaks = 10000, xlim = c(0,2))
mean(sd)
sd
Plot1(1000)
Plot1(1000)
Plot1(1000)
a <- Plot1(1000)
a
Plot1=function(N=1000,seed=0){
#par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(sigma)
}
Plot1(N = 1000)
Plot1(N = 10000)
Plot1(N = 100000)
Plot1=function(N=1000,seed=0){
#par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(y)
}
Plot1(N = 10000)
Plot1=function(N=1000,seed=0){
#par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
# plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(sigma)
}
Plot1(N = 10000)
plot(Plot1(N = 10000))
Plot1(N = 10000)
Plot1=function(N=1000,seed=0){
#par(mfrow=c(2,1))
if(seed>0) set.seed(seed)
y=rnorm(N)
lambda=0.94
sigma=vector(length=N)
sigma[1]=1
for(i in 2:N){
sigma[i]=lambda* sigma[i-1] + (1-lambda)*y[i-1]^2
y[i]=y[i]*sqrt(sigma[i])
}
plot(y, main="", xlab="", ylab="", bty="n", col=2, las=1,type="l",bty="l")
# plot(sigma, main=“”, xlab=“”, ylab=“”, bty=“n”, col=“#377EB8”, las=1,type=‘l’,bty=‘l’)
return(sigma)
}
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
Plot1(N = 10000)
x <- seq(0.1, 10, by = 0.1)
y <- numeric()
y[1] <- 2
r <- 0.02
for (i in 2:100){
y[i] <- y[i-1]*(1+r)
}
plot(y)
r <- 0.05
for (i in 2:100){
y[i] <- y[i-1]*(1+r)
}
plot(y)
plot(y, type = "l")
y
for (i in 2:200){
y[i] <- y[i-1]*(1+r)
}
y
for (i in 2:100){
y[i] <- y[i-1]*(1+r)
}
plot(y, type = "l")
# At 100 days, takes 14-15 times to double
y
y <- numeric()
y[1] <- 2
r <- 0.05
for (i in 2:100){
y[i] <- y[i-1]*(1+r)
}
plot(y, type = "l")
# At 100 days, takes 14-15 times to double
y
x <- 1:100
# At 100 days, takes 14-15 times to double
log_y <- log(y)
lm(log_y ~ x)
e^0.04879
exp(0.04879)
log(2)/log(1.05)
y
plot(log_y)
setwd("~/SRC/Dropbox/Alvaro/R-material/Materials-2020/Seminar5")
library(rmgarch)
library(microbenchmark)
library(lubridate)
# Load the data
load("Y.RData")
# Extract the returns for JPM and C
y <- Y[c("JPM", "C")]
# Check the class of y
class(y)
# Transform into matrix
y  <- as.matrix(y)
# Check class again
class(y)
# Plotting the returns in a 2x1 grid
par(mfrow = c(2,1))
plot(y[,1], type = "l", main = "Returns for JPM", col = 1)
plot(y[,2], type = "l", main = "Returns for C", col = 2)
# Reset the grid
par(mfrow = c(1,1))
# Determine number of entries
n <- dim(y)[1]
# Initializing the EWMA matrix
EWMA <- matrix(NA, nrow = n, ncol = 3)
# Determine lambda
lambda <- 0.94
# Get the sample covariance
S <- cov(y)
S
# 1. Creating a vector with the distinct elements
c(S[1,1], S[1,2], S[2,2])
# 2. Vectorizing the matrix and getting distinct elements
c(S)[c(1,2,4)]
# 3. Using the fact that S is symmetric and using upper.tri()/lower.tri()
S[!upper.tri(S)]
# Fill the initial row of EWMA with the sample covariances
EWMA[1,] <- S[!upper.tri(S)]
# View the matrix
head(EWMA)
# Apply the formula for EWMA
S_2 <- lambda * S + (1-lambda) * y[1,] %*% t(y[1,])
# Get the variances and covariances
S_2[!upper.tri(S_2)]
# Create a loop for rows 2 to n
for (i in 2:n) {
# Update S with the new weighted moving average
S <- lambda * S + (1-lambda) * y[i-1,] %*% t(y[i-1,])
# Fill the following EWMA row with the covariances
EWMA[i,] <- S[!upper.tri(S)]
}
head(EWMA)
# This is a 2x1 vector
y[1,]
# This is a scalar
t(y[1,]) %*% y[1,]
# This is a matrix
y[1,] %*% t(y[1,])
# Initialize the matrix the same way
wrong_EWMA <- matrix(NA, nrow = n, ncol = 3)
S <- cov(y)
wrong_EWMA[1,] <- S[!upper.tri(S)]
# Do the loop but interchange the transpose
for (i in 2:n) {
# Update S with the new weighted moving average
S <- lambda * S + (1-lambda) * t(y[i-1,]) %*% y[i-1,]
# Fill the following EWMA row with the covariances
wrong_EWMA[i,] <- S[!upper.tri(S)]
}
# Plotting estimated variances and covariances
matplot(EWMA, type = "l", main = "EWMA", lty = 1)
legend("topleft", legend = c("JPM", "Covar", "C"), col = 1:3, lty = 1)
# Correlation coefficient
EWMArho <- EWMA[,2]/sqrt(EWMA[,1]*EWMA[,3])
# Plot
plot(EWMArho, type = "l", main = "Correlation coefficient of JPM and C", col = "red")
# Plots for conditional volatility
plot(Y$date, sqrt(EWMA[,1]), type = "l", main = "Conditional volatility JPM")
plot(Y$date, sqrt(EWMA[,3]), type = "l", main = "Conditional volatility C")
# Correlation Coefficient plot
plot(Y$date, EWMArho, type = "l", main = "Correlation coefficient of JPM and C", col = "red")
# Specify the default univariat GARCH model with no mean
xspec <- ugarchspec(
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Replicate it into a multispec() element
uspec <- multispec(replicate(2, xspec))
# Define the specification for the DCC model
spec <- dccspec(
# GARCH specification
uspec = uspec,
# DCC specification
dccOrder = c(1,1),
# Distribution, here multivariate normal
distribution = "mvnorm"
)
# Fit the specification to the data
res <- dccfit(spec, data = y)
# Call the variable
res
coef(res)
# Explore DCC object
names(res@mfit)
res@mfit$R
class(res@mfit$R)
dim(res@mfit$R)
class(res@mfit$H)
rcor(res)
dim(rcor(res))
res@mfit$R[,,1]
res@mfit$R[,,1]
res@mfit$R[:,:,1]
res@mfit$R[1,1,1]
rcor(res)[,,1]
