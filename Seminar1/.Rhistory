x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i) + rnorm(1)
}
plot(x)
delayplot(x,1)
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
for (i in 2:1024) {
x[i] <- sin(2/i)
}
plot(x)
delayplot(x,1)
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(0.1*i)
}
plot(x)
delayplot(x,1)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7**i)
}
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7*i)
}
plot(x)
delayplot(x,1)
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
plot(x)
plot(x, TYPE="L")
plot(x, TYPE="l")
plot(x, type="l")
hist(x)
x <- numeric()
y <- numeric()
x[1] <- runif(1)
y[1] <- runif(1)
install.packages("IRkernel")
IRkernel::isntallspec()
IRkernel::installspec()
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
library(music)
# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
collatz
collatz[collatz > 50]
plot(collatz[collatz > 50])
collatz <- collatz[collatz > 50]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
collatz <- collatz[collatz > 80]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
# Get the matrix for Collatz
collatz_notes
# Get the matrix for Collatz
collatz_music <- collatz_notes
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
playProgression(collatz_music)
var1 <- 1 # Assign values using <-
var2 = 2
var3 <<- 5
var1 <- 1
typeof(var1)
type(var1)
typeof("hi")
typeof("hi hi")
typeof(c(1,2,3))
class(c(1,2,3))
class(v1)
class(var1)
class("hi")
class(4.0)
class(2)
class(2L)
# Remove all the variables
# ls() gives the list of all existing variables
# rm(x) removes x
rm(list = ls())
# We assign names to variables using <-
var1 <- 1
typeof(var1)
var2 <- "Hello"
typeof(var2)
# Array can store data in more than 2-dim, third argument specifies 3-rd dimension
# By default the data is filled by columns
ar1 = array(c(5,6,7,8), dim = c(2,2))
ar1
ar2 = array(c(1,2,3,4,5,6,7,8), dim = c(2,2,2))
ar2
mtx4 <- matrix(c(1,2,"Paul","Paula"), nrow = 2, ncol = 2, byrow = T) # Same data structure
mtx4
mtx6 <- cbind(mtx3, c(7,8, 9)) # Note warning, less dimension, so keep repeating vector
## As with vectors, matrices can only hold one data type:
mtx3 <- matrix(c(1,2,"Paul","Paula"), nrow = 2, ncol = 2, byrow = T)
mtx6 <- cbind(mtx3, c(7,8, 9)) # Note warning, less dimension, so keep repeating vector
mtx6
mtx6 <- cbind(mtx3, c(7)) # Note warning, less dimension, so keep repeating vector
mtx6 <- cbind(mtx3, c(7)) # Note warning, less dimension, so keep repeating vector
mtx6
## Be careful when adding vectors of different lengths
mtx6 <- cbind(mtx3, c(1, 2, 3))
mtx6
# Arrays
## Arrays can store data in more than 2 dimensions
ar1 <- array(c(1,2,3,4,5,6), dim = c(2,1))
ar1
# Arrays
## Arrays can store data in more than 2 dimensions
ar1 <- array(c(1,2,3,4,5,6), dim = c(2,2,2))
ar1
# Arrays
## Arrays can store data in more than 2 dimensions
ar1 <- array(c(1,2,3,4,5,6,7,8), dim = c(2,2,2))
ar1
# Data Frames
## Can store different types of data
df1 <- data.frame(cbind(c(1,2,3), c(4,5,6)))
df1
df2 <- data.frame(cbind(c("AMZN", "AAPL", "MSFT"), c(0.004, 0.015, 0.012))
df2 <- data.frame(cbind(c("AMZN", "AAPL", "MSFT"), c(0.004, 0.015, 0.012)))
df2 <- data.frame(cbind(c("AMZN", "AAPL", "MSFT"), c(0.004, 0.015, 0.012)))
df2
## Assign names to each column
names(df2)
## Assign names to each column
names(df2) <- c("Stock", "Return")
colnames(df2)
## Assign names to each column
colnames(df2) <- c("Stock", "Return")
colnames(df2)
df2 <- data.frame(cbind(c("AMZN", "AAPL", "MSFT"), c(0.004, 0.015, 0.012)))
colnames(df2)
## Assign names to each column
colnames(df2) <- c("Stock", "Return")
colnames(df2)
## What happens if the lenghts of the columns differ?
df3 <- data.frame(cbind(c(1,2,3), c(4,5,6), c("a", "b")))
df3
# Lists
## Generic vector that can contain data of different types
lst1 <- list(var1, vec1, mtx1, df1)
# Creating vectors
vec1 <- c(1, 2, 3) # c stands for column
# Lists
## Generic vector that can contain data of different types
lst1 <- list(var1, vec1, mtx1, df1)
# Matrices
## Start filling the matrix by rows:
mtx1 <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = T)
# Lists
## Generic vector that can contain data of different types
lst1 <- list(var1, vec1, mtx1, df1)
lst1
print(lst1)
dim(vec1)
length(vec1)
dim(df1)
## Index or name of rows
rownames(df2)
## Index or name of rows
rownames(df2) <- c("first", "second", "third")
rownames(df2)
# Get the dimenions of a matrix or an array
dim(mtx1)
dim(ar1)
# The dimension of a vector is not defined
dim(vec1)
# Length of a matrix is its number of elements
length(mtx1)
# Data Frame: Number of variables / columns
length(df1)
length(lst1)
# Length function: lenght()
# Vectors,Matrices and Lists: Number of elements
length(vec1)
# R, unlike Python, is not zero-based indexed
# Get the first element of a vector
vec1[1]
mtx1[1]
# Get the first column of a matrix (empty first value: all rows)
mtx1[,1]
# Get the first row of a matrix (empty second value: all columns)
mtx1[1,]
## Create an empty matrix
mtx7 <- matrix(NA, nrow = 4, ncol = 4)
mtx7
matrix(seq(10))
matrix(seq(9), nrow = 3, ncol = 3)
a <- seq(10)
a
typeof(a)
class(df1)
typeof(df1)
class(a)
class(var1)
class(var2)
df1
df2
# First column of a data.frame
df2[1]
# To retrieve as a vector
df2[,1]
class(df2[,1])
# To retrieve as a vector
df2[,2]
class(df2[,2])
# To retrieve as a vector
df2$Stock
# Access a column by its name
df2$Return
# Create a new column
df2$Company <- c("Amazon", "Apple", "Microsoft")
df2
# For lists, you need to use double squared brackets to extract elements
lst1
# For lists, you need to use double squared brackets to extract elements
lst1[[1]]
# For lists, you need to use double squared brackets to extract elements
lst1[[3]]
# For lists, you need to use double squared brackets to extract elements
lst1[[2]]
# You can then subslice elements. First row of the matrix from the list:
lst1[[3]][1,]
vec1
vec2
vec1 <- c(1,2,3)
vec2 <- c(4,5,6)
# Sum element by element
res1 <- vec1 + vec2
res1
# Product element by element
res2 <- vec1 * vec2
res2
# Ratio element by element
res3 <- vec1 / vec2
res3
# Matrix multiplication
res4 <- vec1 %*% vec2
res4
# Outer product: first vector * each element of the second vector
res5 <- vec1 %o% vec2
res5
t(vec1)
t(vec1) %&% vec1
t(vec1) %*% vec1
vec1 %*% vec1
# Outer product: first matrix * each element of the second vector -> outcome is an array
res9  <- mtx1 %o% mtx2
## By column:
mtx2 <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = F)
# Sum element by element
res6  <- mtx1 + mtx2
res6
# Sum element by element
res6  <- mtx1 + mtx2
res6
# Product element by element
res7  <- mtx1 * mtx2
res7
res8  <- mtx1 %*% mtx2
res8
res9  <- mtx1 %o% mtx2
res9
res10 <- mtx1 %x% mtx2
res10
# Transpose a matrix
t(mtx1)
# Get matrix inverse
imtx1 <- solve(mtx1)
imtx1
mtx1 %*% imtx1
p <- seq(from = 0.1, to = 0.9, by= 0.1)
p
# Inverse normal
qnorm(p, mean = 0, sd = 1)
# Inverse t with df degrees of freedom
qt(p, df = 5)
# Inverse chi-square with df degrees of freedom
qchisq(p, df = 3)
# CDFs Normal, Student-T, and Chi-square
dnorm(p, mean = 0, sd = 1)
dt(p, df = 5)
dchisq(p, df = 3)
# Create sequences
q <- seq(from = -3, to = 3, by = 0.1)
# Create sequences
q <- seq(from = -3, to = 3, by = 0.5)
q
# CDFs Normal, Student-T, and Chi-square
dnorm(p, mean = 0, sd = 1)
# CDFs Normal, Student-T, and Chi-square
dnorm(q, mean = 0, sd = 1)
dnorm(0)
dnorm(1)
?dnorm
dnorm(0.95)
dnorm(0.05)
pnorm(0)
# CDF Normal, Student-T, and Chi-square
pnorm(q, mean = 0, sd = 1)
# CDF Normal, Student-T, and Chi-square
pnorm(p, mean = 0, sd = 1)
pt(q, df = 5)
pchisq(q, df = 3)
# Get random numbers drawn from a given distribution
# Normal - 1 value
rand1 <- rnorm(1)
# Normal - 10 values
rand2 <- rnorm(10)
# Uniform
rand3 <- runif(1)
# Set a seed for replication
set.seed(442)
rnorm(1)
rnorm(1)
# Set a seed for replication
set.seed(442)
rnorm(1)
rnorm(1)
rnorm(10)
rnorm(10)
# Set a seed for replication
set.seed(442)
rnorm(10)
set.seed(442)
rnorm(10)
# Install a new package
install.packages("rugarch")
setwd("~/SRC/Dropbox/Alvaro/FM457")
?save
save(df2, "mydataframe.Rda")
save(df2, file = "mydataframe.Rda")
save()
save(file = "test.RData")
ls()
save(ls(), file = "test.RData")
df2
# Remove it and load it again
rm(df2)
df2
load("mydataframe.Rda")
df2
# Save the entire work environment
save.image(file = "variables.RData")
# Load again
rm(list = ls())
load("variables.RData")
# Load again
rm(list = ls())
setwd("~/SRC/Dropbox/Alvaro/FM457/Materials-2020")
df <- read.csv("index.csv")
View(df)
setwd("~/SRC/Dropbox/Alvaro/FM457/Materials-2020/Seminar 1")
df <- read.csv("index.csv")
View(df)
# Solution
install.packages("readxl")
library(readxl)
?read_excel
df <- read_excel("Shiller_data3.xlsx", col_names = T) # Load file
dim(df)
colnames(df)[7] <- "LT_int_rate"
colnames(df)
df <- read.csv("index.csv")
summary(df)
detach("package:grDevices", unload = TRUE)
library(grDevices)
remove.packages("tseriesChaos")
