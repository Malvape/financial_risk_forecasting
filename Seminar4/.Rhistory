delayplot(x,1)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7**i)
}
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7*i)
}
plot(x)
delayplot(x,1)
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
plot(x)
plot(x, TYPE="L")
plot(x, TYPE="l")
plot(x, type="l")
hist(x)
x <- numeric()
y <- numeric()
x[1] <- runif(1)
y[1] <- runif(1)
install.packages("IRkernel")
IRkernel::isntallspec()
IRkernel::installspec()
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
library(music)
# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
collatz
collatz[collatz > 50]
plot(collatz[collatz > 50])
collatz <- collatz[collatz > 50]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
collatz <- collatz[collatz > 80]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
# Get the matrix for Collatz
collatz_notes
# Get the matrix for Collatz
collatz_music <- collatz_notes
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
playProgression(collatz_music)
remove.packages("Cairo")
library(car)
install.packages("car")
install.packages("car")
install.packages('car','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('rugarch','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('nloptr','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
library(car)
install.packages('carData','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages("carData", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
install.packages("car", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
find.package("factoextra")
find.package("car")
.Library
x <- data.frame("Stock" = c("A", "B"), "Price" = c(42,68))
x
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
install.packages("devtools")
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
library(rugarch)
rugarch::plot()
?rugarch::plot
library(rugarch)
ugarchfit
showMethods("ugarchfit")
?ugarchfit
setwd("~/SRC/Dropbox/Alvaro/R-material/Materials-2020/Seminar4")
library(rugarch)
library(tseries)
library(car)
# Load the data
load("Y.RData")
# Save the returns in a variable called y
y <- Y$JPM
# Simple plot
plot(y, type = "l", main = "Returns for JP Morgan")
# Creating our own ACF function
ACF <- function(xseries, main = "ACF") {
# Define the maximum lag as a function of the length of the series
lag.max <- as.integer(10*log10(length(xseries)))
# Get the ACF values from the acf function
acfx 	= acf(xseries, lag.max = lag.max, plot = FALSE)
# Calculate the confidence interval
clim0	= qnorm((1 + 0.95)/2)/sqrt(acfx$n.used)
# Determine the limits of the plot
ylim 	= range(c(-clim0, clim0, as.numeric(acfx$acf)[-1]))
# Initialize a vector
clx 	= vector(mode = "character", length = lag.max)
#Â Assign the color steelblue to positive ACF values
clx[which(as.numeric(acfx$acf)[-1]>=0)] = "steelblue"
# Assign the color orange to negative ACF values
clx[which(as.numeric(acfx$acf)[-1]<0)] = "orange"
# Create a barplot using the ACF values, lags in the x-axis, colors determined above
barplot(height = as.numeric(acfx$acf)[-1], names.arg = as.numeric(acfx$lag)[-1], ylim = 1.2*ylim, col = clx,
ylab = "ACF", xlab="lag", main = main, cex.main = 0.8)
# Add confidence intervals
abline(h = c(clim0, -clim0), col = "tomato1", lty = 2)
abline(h = 0, col = "black", lty = 1)
# Box it
box()
}
ACF(y, main = "Autocorrelation of returns")
ACF(y^2, main = "Autocorrelation of returns squared")
# Create the specifications
default_spec <- ugarchspec()
# We can call the variable to see what's inside
default_spec
# Fit the model to the data using ugarchfit
default_garch <- ugarchfit(spec = default_spec, data = y)
# Call the variable
default_garch
# Check the content of default_garch
names(default_garch@fit)
# Extract a particular element
default_garch@fit$coef
# Specify APARCH model
spec4 <- ugarchspec(
variance.model = list(model = "apARCH"),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit to the data
apARCH <- ugarchfit(spec = spec4, data = y)
plot(dedefault_garch)
plot(default_garch)
plot(apARCH)
?newsimpact
x <- apARCH
x <- apARCH
vmodel  = x@model$modeldesc$vmodel
ni = newsimpact(z = NULL, x)
ni.y = ni$zy
ni.x = ni$zx
xf = ni$xexpr
yf  = ni$yexpr
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = "steelblue", main = "News Impact Curve", cex.main = 0.8)
#mtext(yf, side = 2, adj = 0.5, padj = -2.5, cex = 0.85)
mtext(paste("GARCH model : ", vmodel), side = 4, adj = 0, padj=0, col = "gray", cex = 0.5)
if(vmodel == "fGARCH"){
mtext(paste("fGARCH submodel: ", x@model$modeldesc$vsubmodel, sep = ""), side = 4, adj = 0, padj = 1.5, col = "gray", cex = 0.5)
}
grid()
# New specification
spec1 <- ugarchspec(
variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit the model
GARCH <- ugarchfit(spec = spec1, data = y)
# Specify tGARCH
spec3 <- ugarchspec(
variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std"
)
# Fit the model
tGARCH <- ugarchfit(spec = spec3, data = y)
# Specify tapARCH model
spec5 <- ugarchspec(
variance.model = list(model = "apARCH"),
mean.model = list(armaOrder = c(0,0), include.mean=T),
distribution.model = "std"
)
# Fit to the data
tapARCH <- ugarchfit(spec = spec5, data = y)
# Plot the News Impact Curve for normal GARCH, tGARCH, apARCH, tapARCH
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[i]
vmodel  = x@model$modeldesc$vmodel
ni = newsimpact(z = NULL, x)
ni.y = ni$zy
ni.x = ni$zx
xf = ni$xexpr
yf  = ni$yexpr
if (i == 1) {
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = "steelblue", main = "News Impact Curve", cex.main = 0.8)
grid()
} else {
lines(ni.x, ni.y)
}
}
a <- models[1]
class(a)
a
models[[1]]
a <- models[[1]]
# Plot the News Impact Curve for normal GARCH, tGARCH, apARCH, tapARCH
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = "steelblue", main = "News Impact Curve", cex.main = 0.8)
grid()
} else {
lines(ni.x, ni.y)
}
}
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve", cex.main = 0.8)
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
# Plot the News Impact Curve for normal GARCH, tGARCH, apARCH, tapARCH
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve", cex.main = 0.8)
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
# Plot the News Impact Curve for normal GARCH, tGARCH, apARCH, tapARCH
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve")
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
png(file="news_impact.png")
cwd
setwd("~/SRC/Dropbox/Alvaro/R-material/Materials-2020/Seminar4")
png(filename = "news_impact.png")
dev.off()
dev.off()
# Plot the News Impact Curve for normal GARCH, tGARCH, apARCH, tapARCH
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
png(filename = "news_impact.png")
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve")
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
dev.off()
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
png(filename = "news_impact.png")
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve",
ylim = c(0,0.004))
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
dev.off()
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
png(filename = "news_impact.png")
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve",
ylim = c(0.0005,0.004))
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
dev.off()
# New specification
spec1 <- ugarchspec(
variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit the model
GARCH <- ugarchfit(spec = spec1, data = y)
# Specification for ARCH(1)
spec2 <- ugarchspec(
variance.model = list(garchOrder = c(1,0)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit to the data
ARCH <- ugarchfit(spec = spec2, data = y, solver = "hybrid")
# Specify tGARCH
spec3 <- ugarchspec(
variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
distribution.model = "std"
)
# Fit the model
tGARCH <- ugarchfit(spec = spec3, data = y)
# Specify APARCH model
spec4 <- ugarchspec(
variance.model = list(model = "apARCH"),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit to the data
apARCH <- ugarchfit(spec = spec4, data = y)
# Specify tapARCH model
spec5 <- ugarchspec(
variance.model = list(model = "apARCH"),
mean.model = list(armaOrder = c(0,0), include.mean=FALSE),
distribution.model = "std"
)
# Fit to the data
tapARCH <- ugarchfit(spec = spec5, data = y)
models <- c(GARCH, tGARCH, apARCH, tapARCH)
for (i in 1:4) {
x <- models[[i]]
vmodel  <- x@model$modeldesc$vmodel
ni <- newsimpact(z = NULL, x)
ni.y <- ni$zy
ni.x <- ni$zx
xf <- ni$xexpr
yf  <- ni$yexpr
if (i == 1) {
png(filename = "news_impact.png")
plot( ni.x, ni.y, ylab = yf, xlab = xf, type = "l", lwd = 2, col = i, main = "News Impact Curve",
ylim = c(0.0005,0.004))
grid()
} else {
lines(ni.x, ni.y, col = i)
}
}
legend("bottomleft", legend = c("GARCH", "tGARCH", "apARCH", "tapARCH"), col = 1:4, lty = 1)
dev.off()
