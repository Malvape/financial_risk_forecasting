x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
for (i in 2:1024) {
x[i] <- sin(2/i)
}
plot(x)
delayplot(x,1)
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(0.1*i)
}
plot(x)
delayplot(x,1)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7**i)
}
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(7*i)
}
plot(x)
delayplot(x,1)
plot(x)
x <- numeric()
x[1] <- runif(1)
for (i in 2:1024) {
x[i] <- sin(i)
}
plot(x)
delayplot(x,1)
plot(x)
plot(x, TYPE="L")
plot(x, TYPE="l")
plot(x, type="l")
hist(x)
x <- numeric()
y <- numeric()
x[1] <- runif(1)
y[1] <- runif(1)
install.packages("IRkernel")
IRkernel::isntallspec()
IRkernel::installspec()
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
library(music)
# Create system of notes
notes <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "Bb", "B")
allnotes <- character()
for (i in 3:8) {
for (j in 1:length(notes)) {
allnotes = c(allnotes, paste0(notes[j],i))
}
}
# Adding Collatz numbers
collatz_stop <- function(N) {
# Returns steps needed for the series to reach 1
steps = 0
while (N != 1) {
if (N %% 2 == 0) {
N = N/2
} else {
N = 3 * N + 1
}
steps = steps + 1
}
return(steps)
}
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
collatz <- numeric()
for (i in 2:200) {
collatz[i-1] = collatz_stop(i)
}
collatz
collatz[collatz > 50]
plot(collatz[collatz > 50])
collatz <- collatz[collatz > 50]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
collatz <- collatz[collatz > 80]
length(unique(collatz))
keys <- sort(unique(collatz))
# Transform collatz into notes
collatz_notes <- numeric()
for (i in 1:length(collatz)) {
collatz_notes[i] <- allnotes[match(collatz[i], keys)]
}
durations <- function(x) {
tmp_seq <- sequence(rle(as.character(x))$lengths)
tmp_new <- numeric()
for (i in 1:length(tmp_seq)) {
if (tmp_seq[i+1] != 1  & i < length(tmp_seq)) {
tmp_new[i] <- NA
} else {
tmp_new[i] <- tmp_seq[i]
}
}
music <- matrix(NA, nrow = length(x), ncol = 2)
music[,1] <- x
music[,2] <- tmp_new
music <- music[which(!is.na(music[,2])),]
return(music)
}
# Get the matrix for Collatz
collatz_music <- durations(collatz_notes)
collatz_music
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
# Get the matrix for Collatz
collatz_notes
# Get the matrix for Collatz
collatz_music <- collatz_notes
# Play it!
bpm <- 150
for (i in 1:dim(collatz_music)[1]) {
playNote(collatz_music[i,1], duration = as.integer(collatz_music[i,2]), BPM = bpm)
Sys.sleep(60*as.integer(collatz_music[i,2])/bpm)
}
playProgression(collatz_music)
remove.packages("Cairo")
library(car)
install.packages("car")
install.packages("car")
install.packages('car','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('rugarch','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages('nloptr','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
library(car)
install.packages('carData','/Users/alvaroaguirre/opt/anaconda3/lib/R/library')
install.packages("carData", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
install.packages("car", "/Users/alvaroaguirre/opt/anaconda3/lib/R/library")
find.package("factoextra")
find.package("car")
.Library
x <- data.frame("Stock" = c("A", "B"), "Price" = c(42,68))
x
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
install.packages("devtools")
require(devtools)
install_version("repr", version = "0.19.2", repos = "http://cran.us.r-project.org")
setwd("~/SRC/Dropbox/Alvaro/R-material/Materials-2020/Seminar3")
library(rugarch)
# Load the data
load("Y.RData")
# Save the returns in a variable called y
y <- Y$JPM
# Simple plot
plot(y, type = "l", main = "Returns for JP Morgan")
# Create the specifications
default_spec <- ugarchspec()
# We can call the variable to see what's inside
default_spec
# Fit the model to the data using ugarchfit
default_garch <- ugarchfit(spec = default_spec, data = y)
# Call the variable
default_garch
plot(default_garch)
plot(default_garch)
# Specification for ARCH(1)
spec2 <- ugarchspec(
variance.model = list(garchOrder = c(1,0)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit to the data
ARCH <- ugarchfit(spec = spec2, data = y, solver = "hybrid")
plot(ARCH)
y
head(y)
# Specification for ARCH(1)
spec2 <- ugarchspec(
variance.model = list(garchOrder = c(1,0)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE)
)
# Fit to the data
ARCH <- ugarchfit(spec = spec2, data = y, solver = "hybrid")
plot(ARCH)
plot(GARCH)
plot(default_garch)
# Specify the model
spec3 <- ugarchspec(
variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std"
)
# Fit the model
tGARCH <- ugarchfit(spec = spec3, data = y)
plot(tGARCH)
# Creating a function for Likelihood Tests
Test <- function(restricted, unrestricted) {
# Specifying the degrees of freedom as the number of restrictions
df <- length(unrestricted@fit$coef) - length(restricted@fit$coef)
# Creating the statistic
lr <- 2*(likelihood(unrestricted) - likelihood(restricted)
# Finding its p-value
p.value <- 1 - pchisq(lr, df)
# Output
cat("Degrees of freedom:", df, "\n",
"Likelihood of unrestricted model:", likelihood(unrestricted), "\n",
"Likelihood of restricted model:", likelihood(restricted), "\n",
"LR: 2*(Lu-Lr):", lr, "\n",
"p-value:", p.value
)
}
library(animation)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 2)
}
}
View(mtx)
random_sims <- mtx[,sample(1:1000,100)]
saveGIF(
{
for (i in 1:100) {
matplot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations")
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
par(new = TRUE)
matplot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
par(new = TRUE)
plot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
plot(random_sims[,1])
plot(random_sims[,2])
par(new=TRUE)
plot(random_sims[,5])
saveGIF(
{
for (i in 1:100) {
if (i!=1) par(new = TRUE)
plot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
if (i!=1) par(new = TRUE)
plot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
if (i==1) {
plot(random_sims[,i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
} else {
lines(random_sims[,i], col = i)
}
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
matplot(random_sims[,1:i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
matplot(random_sims[,1:i], type = "l", lwd = 2, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:100) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
random_sims <- mtx[,sample(1:1000,200)]
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 1)
}
}
random_sims <- mtx[,sample(1:1000,200)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 3)
}
}
random_sims <- mtx[,sample(1:1000,200)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk_2.gif",
clean = TRUE
)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 2.5)
}
}
random_sims <- mtx[,sample(1:1000,200)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk.gif",
clean = TRUE
)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 2.5)
}
}
random_sims <- mtx[,sample(1:1000,250)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk.gif",
clean = TRUE
)
library(animation)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 2.5)
}
}
random_sims <- mtx[,sample(1:1000,250)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 100 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk.gif",
clean = TRUE
)
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 250 simulations", col = 1:i, lty = 1)
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk.gif",
clean = TRUE
)
library(animation)
mtx <- matrix(NA, nrow = 101, ncol = 1000)
mtx[1,] <- 500
for (i in 1:1000) {
for (j in 2:101) {
mtx[j,i] <- mtx[j-1,i] + rnorm(1, mean = 0, sd = 2.5)
}
}
random_sims <- mtx[,sample(1:1000,250)]
saveGIF(
{
for (i in 1:200) {
matplot(random_sims[,1:i], type = "l", lwd = 1, xlim = c(0, 100), ylim = c(400, 600),
main = "Random Walk of 250 simulations", col = 1:i, lty = 1, ylab = "Price", xlab = "Time")
}
},
loop=TRUE,interval=0.05, movie.name = "random_walk.gif",
clean = TRUE
)
